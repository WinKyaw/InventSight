package com.pos.inventsight.model.sql;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import org.hibernate.annotations.GenericGenerator;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Table(name = "company_store_user",
       uniqueConstraints = @UniqueConstraint(columnNames = {"user_id", "company_id", "store_id"}))
public class CompanyStoreUser {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    @Column(name = "id", updatable = false, nullable = false, columnDefinition = "UUID")
    private UUID id;
    
    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "company_id", nullable = false)
    private Company company;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "store_id")
    private Store store;
    
    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @NotNull
    @Enumerated(EnumType.STRING)
    private CompanyRole role = CompanyRole.EMPLOYEE;
    
    @Column(name = "is_active")
    private Boolean isActive = true;
    
    @Column(name = "assigned_at")
    private LocalDateTime assignedAt = LocalDateTime.now();
    
    @Column(name = "assigned_by")
    private String assignedBy;
    
    @Column(name = "revoked_at")
    private LocalDateTime revokedAt;
    
    @Column(name = "revoked_by")
    private String revokedBy;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt = LocalDateTime.now();
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt = LocalDateTime.now();
    
    // Constructors
    public CompanyStoreUser() {
        // UUID will be generated by Hibernate using the @GeneratedValue annotation
    }
    
    public CompanyStoreUser(Company company, User user, CompanyRole role) {
        this();
        this.company = company;
        this.user = user;
        this.role = role;
    }
    
    public CompanyStoreUser(Company company, User user, CompanyRole role, String assignedBy) {
        this();
        this.company = company;
        this.user = user;
        this.role = role;
        this.assignedBy = assignedBy;
    }
    
    public CompanyStoreUser(Company company, Store store, User user, CompanyRole role) {
        this();
        this.company = company;
        this.store = store;
        this.user = user;
        this.role = role;
    }
    
    public CompanyStoreUser(Company company, Store store, User user, CompanyRole role, String assignedBy) {
        this();
        this.company = company;
        this.store = store;
        this.user = user;
        this.role = role;
        this.assignedBy = assignedBy;
    }
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public Company getCompany() { return company; }
    public void setCompany(Company company) { this.company = company; }
    
    public Store getStore() { return store; }
    public void setStore(Store store) { this.store = store; }
    
    public User getUser() { return user; }
    public void setUser(User user) { this.user = user; }
    
    public CompanyRole getRole() { return role; }
    public void setRole(CompanyRole role) { this.role = role; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public LocalDateTime getAssignedAt() { return assignedAt; }
    public void setAssignedAt(LocalDateTime assignedAt) { this.assignedAt = assignedAt; }
    
    public String getAssignedBy() { return assignedBy; }
    public void setAssignedBy(String assignedBy) { this.assignedBy = assignedBy; }
    
    public LocalDateTime getRevokedAt() { return revokedAt; }
    public void setRevokedAt(LocalDateTime revokedAt) { this.revokedAt = revokedAt; }
    
    public String getRevokedBy() { return revokedBy; }
    public void setRevokedBy(String revokedBy) { this.revokedBy = revokedBy; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
    
    // Business methods
    public void revokeRole(String revokedBy) {
        this.isActive = false;
        this.revokedAt = LocalDateTime.now();
        this.revokedBy = revokedBy;
        this.updatedAt = LocalDateTime.now();
    }
    
    public void restoreRole() {
        this.isActive = true;
        this.revokedAt = null;
        this.revokedBy = null;
        this.updatedAt = LocalDateTime.now();
    }
    
    /**
     * Check if user has company-level access (not store-specific)
     */
    public boolean isCompanyLevel() {
        return store == null;
    }
    
    /**
     * Check if user has store-specific access
     */
    public boolean isStoreSpecific() {
        return store != null;
    }
    
    /**
     * Check if this role has owner-level privileges
     */
    public boolean isOwnerLevel() {
        return role.isOwnerLevel();
    }
    
    /**
     * Check if this role has manager-level privileges
     */
    public boolean isManagerLevel() {
        return role.isManagerLevel();
    }
    
    /**
     * Check if user can manage stores
     */
    public boolean canManageStores() {
        return role.canManageStores() && isCompanyLevel();
    }
    
    /**
     * Check if user can manage users
     */
    public boolean canManageUsers() {
        return role.canManageUsers();
    }
    
    /**
     * Check if user can manage warehouses
     */
    public boolean canManageWarehouses() {
        return role.canManageWarehouses() && isCompanyLevel();
    }
    
    @PreUpdate
    public void updateTimestamp() {
        this.updatedAt = LocalDateTime.now();
    }
}