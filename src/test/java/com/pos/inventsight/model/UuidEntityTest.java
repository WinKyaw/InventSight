package com.pos.inventsight.model;

import com.pos.inventsight.model.sql.User;
import com.pos.inventsight.model.sql.Product;
import com.pos.inventsight.model.sql.Store;
import com.pos.inventsight.model.sql.UserRole;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit test for UUID functionality in User and Product entities
 */
class UuidEntityTest {
    
    @Test
    void testUserUuidGeneration() {
        // Test UUID is generated automatically in constructor
        User user = new User();
        
        assertNotNull(user.getUuid(), "UUID should be generated automatically");
        assertNotNull(user.getTenantId(), "Tenant ID should be set automatically");
        assertEquals(user.getUuid(), user.getTenantId(), "Tenant ID should equal UUID");
        
        // Test UUID format is valid
        assertTrue(isValidUUID(user.getUuid().toString()), "UUID should be valid format");
    }
    
    @Test
    void testUserConstructorWithParameters() {
        User user = new User("testuser", "test@example.com", "password", "John", "Doe");
        
        assertNotNull(user.getUuid(), "UUID should be generated in parameterized constructor");
        assertNotNull(user.getTenantId(), "Tenant ID should be set in parameterized constructor");
        assertEquals(user.getUuid(), user.getTenantId(), "Tenant ID should equal UUID");
        assertEquals("testuser", user.getUsername());
        assertEquals("test@example.com", user.getEmail());
    }
    
    @Test
    void testUserUuidUniqueness() {
        User user1 = new User();
        User user2 = new User();
        
        assertNotEquals(user1.getUuid(), user2.getUuid(), "UUIDs should be unique");
        assertNotEquals(user1.getTenantId(), user2.getTenantId(), "Tenant IDs should be unique");
    }
    
    @Test
    void testUserUuidSetter() {
        User user = new User();
        UUID oldUuid = user.getUuid();
        UUID newUuid = UUID.randomUUID();
        
        user.setUuid(newUuid);
        
        assertEquals(newUuid, user.getUuid(), "UUID should be updated");
        assertEquals(newUuid, user.getTenantId(), "Tenant ID should be updated when UUID changes");
        assertNotEquals(oldUuid, user.getUuid(), "UUID should be different from original");
    }
    
    @Test
    void testProductUuidGeneration() {
        // Test UUID is generated automatically in constructor
        Product product = new Product();
        
        assertNotNull(product.getUuid(), "UUID should be generated automatically");
        assertTrue(isValidUUID(product.getUuid()), "UUID should be valid format");
    }
    
    @Test
    void testProductConstructorWithParameters() {
        Store store = new Store("Test Store", "Address", "City", "State", "Country");
        Product product = new Product("Test Product", "SKU-001", 
                                    BigDecimal.valueOf(10), BigDecimal.valueOf(15), 
                                    BigDecimal.valueOf(20), 100, store);
        
        assertNotNull(product.getUuid(), "UUID should be generated in parameterized constructor");
        assertEquals("Test Product", product.getName());
        assertEquals("SKU-001", product.getSku());
        assertEquals(store, product.getStore());
    }
    
    @Test
    void testProductUuidUniqueness() {
        Product product1 = new Product();
        Product product2 = new Product();
        
        assertNotEquals(product1.getUuid(), product2.getUuid(), "Product UUIDs should be unique");
    }
    
    @Test
    void testProductUuidSetter() {
        Product product = new Product();
        String oldUuid = product.getUuid();
        String newUuid = UUID.randomUUID().toString();
        
        product.setUuid(newUuid);
        
        assertEquals(newUuid, product.getUuid(), "Product UUID should be updated");
        assertNotEquals(oldUuid, product.getUuid(), "UUID should be different from original");
    }
    
    @Test
    void testUserPrePersistHook() {
        User user = new User();
        user.setUuid(null); // Clear UUID to test the PrePersist hook
        user.setTenantId(null); // Clear tenant ID
        
        // Simulate JPA PrePersist call
        user.ensureUuid();
        
        assertNotNull(user.getUuid(), "UUID should be regenerated by PrePersist");
        assertNotNull(user.getTenantId(), "Tenant ID should be regenerated by PrePersist");
        assertEquals(user.getUuid(), user.getTenantId(), "Tenant ID should equal UUID after PrePersist");
    }
    
    @Test
    void testProductPrePersistHook() {
        Product product = new Product();
        product.setUuid(null); // Clear UUID to test the PrePersist hook
        
        // Simulate JPA PrePersist call
        product.ensureUuid();
        
        assertNotNull(product.getUuid(), "UUID should be regenerated by PrePersist");
    }
    
    @Test
    void testUserPrePersistDoesNotOverwriteExistingUuid() {
        User user = new User();
        UUID originalUuid = user.getUuid();
        
        // Call ensureUuid when UUID already exists
        user.ensureUuid();
        
        assertEquals(originalUuid, user.getUuid(), "Existing UUID should not be overwritten");
    }
    
    @Test
    void testUserEntityIntegrity() {
        User user = new User("user123", "user@test.com", "password", "Test", "User");
        user.setRole(UserRole.OWNER);
        user.setIsActive(true);
        user.setEmailVerified(true);
        
        // Validate all required fields are preserved along with UUID
        assertEquals("user123", user.getUsername());
        assertEquals("user@test.com", user.getEmail());
        assertEquals(UserRole.OWNER, user.getRole());
        assertTrue(user.getIsActive());
        assertTrue(user.getEmailVerified());
        assertNotNull(user.getUuid());
        assertNotNull(user.getTenantId());
        
        // Test UserDetails methods still work
        assertTrue(user.isEnabled());
        assertEquals("ROLE_OWNER", user.getAuthorities().iterator().next().getAuthority());
    }
    
    // Helper method to validate UUID format
    private boolean isValidUUID(String uuid) {
        try {
            UUID.fromString(uuid);
            return true;
        } catch (IllegalArgumentException e) {
            return false;
        }
    }
}