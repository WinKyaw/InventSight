package com.pos.inventsight.model.sql;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.UUID;

/**
 * Integration test to verify that the User entity UUID conversion 
 * resolves the PostgreSQL UUID type mapping issue
 */
public class UserUuidIntegrationTest {

    @Test
    public void testUserUuidFieldCompatibilityWithPostgreSQL() {
        // Create a user the way the application would
        User user = new User("testuser", "test@example.com", "password123", "John", "Doe");
        
        // Verify the UUID fields are proper UUID objects (not Strings)
        assertNotNull(user.getUuid(), "UUID should be generated");
        assertNotNull(user.getTenantId(), "Tenant ID should be generated");
        
        // Verify they are actual UUID objects, not Strings
        // This ensures JPA will map them correctly to PostgreSQL UUID columns
        assertTrue(user.getUuid() instanceof UUID, "UUID field must be java.util.UUID type");
        assertTrue(user.getTenantId() instanceof UUID, "Tenant ID field must be java.util.UUID type");
        
        // Verify they have valid UUID format when converted to String
        String uuidString = user.getUuid().toString();
        assertTrue(uuidString.matches("[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"), 
                   "UUID should have valid format: " + uuidString);
        
        String tenantIdString = user.getTenantId().toString();
        assertTrue(tenantIdString.matches("[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"), 
                   "Tenant ID should have valid format: " + tenantIdString);
    }

    @Test
    public void testUserUuidSetterCompatibility() {
        User user = new User();
        UUID testUuid = UUID.fromString("550e8400-e29b-41d4-a716-446655440000");
        
        // Test that we can set UUID objects directly
        user.setUuid(testUuid);
        
        // Verify the UUID is set correctly
        assertEquals(testUuid, user.getUuid(), "UUID should be set correctly");
        assertEquals(testUuid, user.getTenantId(), "Tenant ID should be updated when UUID is set");
    }

    @Test
    public void testUserEnsureUuidFunctionality() {
        // Create user without calling constructor that sets UUIDs
        User user = new User();
        user.setUuid(null);
        user.setTenantId(null);
        
        // Call ensureUuid method (simulates @PrePersist behavior)
        user.ensureUuid();
        
        // Verify UUIDs are generated
        assertNotNull(user.getUuid(), "UUID should be generated by ensureUuid");
        assertNotNull(user.getTenantId(), "Tenant ID should be generated by ensureUuid");
        assertEquals(user.getUuid(), user.getTenantId(), "Tenant ID should equal UUID");
    }

    @Test
    public void testMultipleUsersHaveUniqueUuids() {
        // Create multiple users
        User user1 = new User("user1", "user1@test.com", "pass", "User", "One");
        User user2 = new User("user2", "user2@test.com", "pass", "User", "Two");
        User user3 = new User("user3", "user3@test.com", "pass", "User", "Three");
        
        // Verify all UUIDs are unique
        assertNotEquals(user1.getUuid(), user2.getUuid(), "User UUIDs should be unique");
        assertNotEquals(user1.getUuid(), user3.getUuid(), "User UUIDs should be unique");
        assertNotEquals(user2.getUuid(), user3.getUuid(), "User UUIDs should be unique");
        
        // Verify all tenant IDs are unique
        assertNotEquals(user1.getTenantId(), user2.getTenantId(), "Tenant IDs should be unique");
        assertNotEquals(user1.getTenantId(), user3.getTenantId(), "Tenant IDs should be unique");
        assertNotEquals(user2.getTenantId(), user3.getTenantId(), "Tenant IDs should be unique");
    }

    @Test
    public void testUuidToStringConversionForExternalApis() {
        User user = new User();
        
        // Verify we can convert UUIDs to Strings for external APIs
        String uuidString = user.getUuid().toString();
        String tenantIdString = user.getTenantId().toString();
        
        // Verify the strings can be converted back to UUIDs
        UUID parsedUuid = UUID.fromString(uuidString);
        UUID parsedTenantId = UUID.fromString(tenantIdString);
        
        assertEquals(user.getUuid(), parsedUuid, "UUID should survive string conversion");
        assertEquals(user.getTenantId(), parsedTenantId, "Tenant ID should survive string conversion");
    }
}